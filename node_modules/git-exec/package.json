{
  "name": "git-exec",
  "description": "Thin wrapper around the git binary.",
  "version": "0.2.1",
  "homepage": "https://github.com/alexjeffburke/node-git-exec",
  "author": {
    "name": "Alex J Burke",
    "email": "alex@alexjeffburke.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/alexjeffburke/node-git-exec.git"
  },
  "bugs": {
    "url": "https://github.com/alexjeffburke/node-git-exec/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/alexjeffburke/node-git-exec/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/git-exec",
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "~0.3.17",
    "rimraf": "~2.1.4"
  },
  "keywords": [],
  "readme": "# git-exec\nThis library provides a very simple wrapper around the git binary.\n\n## Getting Started\nInstall the module with: `npm install git-exec`\n\n## Documentation\nThe library is used by constructing an object which represents a\ngit repository on the system.\n\nThe majority of the interaction involves an exec() method which is\ninvoked on instances of such objects. This method is relatively stupid in\nthat we do not try to parse the output or validate commands invoked.\n\nHowever, we do take care to provide a means to both init / clone git\nrepositories and we set the working directory correctly such that\nfurther git commands execute in the correct context.\n\n### repo\nThis method will construct a repo object at the specified directory.\n\n### init/clone\nThese methods will return a repo object on success as the first argument to the\ncallback passed to them or null on error.\n\n```javascript\nfunction callback(repo) {\n  if (repo !== null) {\n    // valid repo\n  } else {\n    // an error occurred\n  }\n}\n```\n\n## Examples\n\n### Cloning a remote repository and checkout of origin/dev\n```javascript\nvar Git = require('git-exec');\nGit.clone(a-repo.git, 'dir', function(repo) {\n  // NOTE the callback is given a reference to the git repository\n\n  repo.exec('checkout', ['-t origin/dev'], function() {\n    // ... callback to execute after branch checkout\n  });\n});\n```\n\n### Intialising a local repository in CWD\n\n```javascript\nvar Git = require('git-exec');\nGit.init('my-new-repo', null, function(repo) {\n  // ... operations on repo object\n});\n```\n\n### Intialising a local repository at given path\n```javascript\nvar Git = require('git-exec');\nGit.init(null, '/path/to/repo', function(repo) {\n  // ... operations on repo object\n});\n```\n\nAs an alternative, init also supports a named repo at a specific path. Thus\nfor a repo named 'my-new-repo' at '/path/to' such that the full path to the\nrepo is /path/to/my-new-repo call init as follows:\n\n```javascript\nvar Git = require('git-exec');\nGit.init('my-new-repo', '/path/to', function(repo) {\n  // ... operations on repo object\n});\n```\n\n### Using a local git repository\n```javascript\nvar Git = require('git-exec');\nvar repo = new Git('./path/to/repo');\n\nrepo.exec('pull', null, function(err, stdout) {\n  // ... callback to execute after git pull\n});\n```\n\nOr alternatively, to instantly create a repo and perform some operation:\n\n```javascript\nrequire('git-exec').repo('./path/to/repo').exec('branch', ['dev'], function() {\n  // ... callback to execute\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add\nunit tests for any new or changed functionality.\nLint and test your code using [grunt](https://github.com/gruntjs/grunt).\n\n## Release History\n* 0.2.1 - add tests to assert behaviour with associated fixups\n* 0.2.0 - add a new repo() method to the API\n* 0.1.2 - make sure cwd argument we pass to exec is made absolute\n* 0.1.1 - cleanup the code; no functional changes\n* 0.1.0 - initial release\n\n## License\nCopyright (c) 2013 Alex J Burke\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "git-exec@0.2.1",
  "dist": {
    "shasum": "81e7933790ae17d1e9600d4f5b65077233cfff58",
    "tarball": "http://registry.npmjs.org/git-exec/-/git-exec-0.2.1.tgz"
  },
  "_from": "git-exec@*",
  "_npmVersion": "1.2.17",
  "_npmUser": {
    "name": "alexjeffburke",
    "email": "alex@alexjeffburke.com"
  },
  "maintainers": [
    {
      "name": "alexjeffburke",
      "email": "alex@alexjeffburke.com"
    }
  ],
  "directories": {},
  "_shasum": "81e7933790ae17d1e9600d4f5b65077233cfff58",
  "_resolved": "https://registry.npmjs.org/git-exec/-/git-exec-0.2.1.tgz"
}
